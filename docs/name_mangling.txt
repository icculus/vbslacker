Here's the name mangling scheme:

Internal-only functions, and functions that are only called by
automatically generated code are prepended with a "__", as usual. First
word lowercase, first letter of each extra word uppercase, yadda yadda
yadda.

For Basic API functions, the function names go like this (for example.) :

PBasicString vbSiS_string_DC_(STATEPARAMS, int x, PBasicString y);

To explain:
All APIs start with "vb". The next character is the return value.

if it's a SUB (void), the character is 'p' for "procedure".
otherwise, it'll be the type of data returned. See below.

The next characters are the arguments. One character per argument. See below.
The end of the encoded information in the above format is signified by an
underscore character ('_'). After that, the proper name of the function
(like "instr" or "bsave" or whatever) is appended, completing the "mangled"
API's name.

So, in short, it's a modified hungarian notation. A little different, but
VERY detailed.

STATEPARAMS is part of every API call, and it not encoded in the name of
the API. It's for the OnEvents stuff; don't worry about it right now.

These chars can be:

'b' == "boolean BYVAL"
'i' == "integer BYVAL"
'l' == "long BYVAL"
'f' == "single (float) BYVAL"
'd' == "double BYVAL"
's' == "string BYVAL" (*see note)
'v' == "Variant BYVAL" (*see note)
'r' == "Array BYVAL" (*see note)
'a' == "Any variable BYVAL" (**see note)
'B' == "boolean BYREF"
'I' == "integer BYREF"
'L' == "long BYREF"
'F' == "float BYREF"
'D' == "double BYREF"
'S' == "String BYREF" (*see note)
'V' == "Variant BYREF" (*see note)
'R' == "Array BYREF" (*see note)
'O' == "OnOffStopType" (***see note)
'N' == "Null argument" (****see note)
'1' == "File mode" (*****see note)
'2' == "Access mode" (*****see note)
'3' == "Lock mode" (*****see note)
'n' == "n arguments" (******see note)

*Strings, Arrays, and Variants are actually structures, so passing them by
reference (BYREF) passes a pointer to the structure. Passing them by value
(BYVAL) requires the parser/compiler create an exact copy of the data, and
pass a pointer to the clone of that data. Before return, the called function
must clean up BYVAL structures like this. Intrinsics are just popped off the
stack, and the called function does nothing with them. In fact, the way C
works, the calling function doesn't pop the stack or arguments at all.
You can see why we used 'S' and not 's' in the above example. Intrinsic data
types passed BYVAL and BYREF work just like their equivalents in C, and are
typically passed by value in the average API call, even though BASIC-coded
functions are BYREF by default.

**"Any" variable type is used for things like "pos(x)", where x is
simply any filler. That's stupid, but that's BASIC. Whatever you pass
for these functions are cast to a (void *), regardless of what sort of
data it really is, and sent along.

***"OnOffStopType" is defined in OnOffStopType.h, in the BASIClib
directory. It's for things like TIMER ON, or PEN STOP. It's hardly used,
and since it's a literal that can't be directly stored in any variable,
we made it a type of its own.

****API calls like "locate" can actually SKIP arguments, like
[locate x, y, , 3] Yikes. The Null argument is made for the
blank argument.

*****These are for the OPEN calls. It's ugly. Sorry.

******Functions that accept variable arguments, like CLOSE and ERASE, will be
broken down into multiple calls by the parser/compiler:

CLOSE 1, 5, 7

becomes:

vbpin_close(1);
vbpin_close(5);
vbpin_close(7);

The identifier to signify that a given argument is repeated a variable amount
of times is 'n'. Mathematically, 'n' is frequently used to specify iterations.

'n' must follow another parameter type character; the data type it follows is
the one that the parser/compiler will expect every argument in the variable
list to be.

'n' must be the last character in the information encoding. That is, after
this character, the next one MUST be '_' followed by the function's actual
name.

So, CLOSE has two forms:

void vbp_close(STATEPARAMS);                 /* close all files      */
void vbpin_close(STATEPARAMS, int fileNum);  /* close specific files */

The parser/compiler will figure out which function call is appropriate. If,
in this case, there are arguments to a CLOSE statement, and each are castable
to type (int), then the parser/compiler will generate as many calls to
vbpin_close() as there are arguments to the BASIC equivalent. This is easier
to implement cleanly than using C's variable argument facilities, probably
faster in the long run, and less bug prone in both BASIClib and end-user
compiled code.

APIs using the 'n' char are expected to have at least one argument. To have
no arguments be valid, "overload" the API with a non-variable argument
version.  For example, if vbp_close() didn't exist, "CLOSE" would not be
considered a valid BASIC command unless it had at least one file number
specified with it. This allows for both the ERASE command, which need
at least one argument, and the CLOSE command, which does something
different for no arguments... etc...  (That, and by this method, you'd have
to overload your function for zero argument versions since it breaks it down
into multiple calls...what's the parser/compiler going to do? Break it down
into ZERO calls? That's obviously unwanted behavior.)


Other stuff:

'$' chars, like "RTRIM$()", are encoded as "_DC_" (for "dollar
character"), as you can see above. Other potential ones are "_NC_"
('#'), _EC_ ('!'), _PC_ ('%')...

This system allows us to have "overloaded" functions, and gives the
parser/compiler a more sane way than a giant conditional block to
determine if a function exists, with a few exceptions, such as one of
MID$()'s variants.

Please refer to special_cases.txt for possible exceptions to these rules...

/* end of name_mangling.txt ... */

