
IDEALLY we'll want a conversion to look like this:

(Remember that BASIC is NOT case sensitive, even though historically Microsoft's
  BASIC editors have been anal about changing code to the "proper" case.
  stringBuffer is defined in BASIClib for scratchpad purposes. In the long
  run, comments will just be stripped, not converted, but our initial
  parser/compiler should probably leave them for debugging purposes.)

' Start of my li'l program...

SUB butts (fileNo AS INTEGER, message AS STRING)
    totalMsg$ = "Message is : " + message

    ON ERROR GOTO crackpipe
    PRINT #fileNo, totalMsg$
    PRINT "Message written."
    EXIT SUB

crackpipe:   REM error handler...
    PRINT "Inside error handler. Error number is" + STR$(ERR)
END SUB

'Since we didn't open a file, this throws a runtime error...
butts 10, "BITE ME!"

' end of my li'l program...


HERE'S THE CONVERTED VERSION:

#include "BASIClib.h"

PBasicString strConst1 = __constString("Message is : ");
PBasicString strConst2 = __constString("Message written.");
PBasicString strConst3 = __constString("Inside error handler. Error number is");
PBasicString strConst4 = __constString("BITE ME!");

/* Start of my li'l program... */

void butts(int fileNo, PBasicString message)
{
    PBasicString totalMsg_DC_ = NULL;
    PBasicString bufferString = NULL;

    __assignString(&totalMsg_DC_, strConst1);
    __catString(&totalMsg_DC_, message);

    getStackPointer(&_stack_ptr_);
    __registerOnEventHandler(crackpipe, &message + sizeof (message),
                             _stack_ptr_, &fileNo - sizeof (void *),
                             ONERROR);

    print_NC_(10, totalMsg_DC_);
    print(strConst2);
    __deregisterOnEventHandler(&message + sizeof (message), ONERROR);
    __freeString(bufferString);
    __freeString(totalMsg_DC_);
    return;

crackpipe:    /* error handler... */ 
    __markOnEventHandlerAddr;
    __assignString(&stringBuffer, strConst3); 
    __catString(&stringBuffer, str_DC_(err()));
    print(stringBuffer);
    __deregisterOnEventHandler(&message + sizeof (message), ONERROR);
    __freeString(totalMsg_DC_);
    __freeString(bufferString);
} /* butts */


void main(int argc, char **argv, char **envp)
{
    __initBasicLib(argc, argv, envp);

    /* Since we didn't open a file, this throws a runtime error... */
    butts(10, strConst4);
    __deinitBasicLib();
} /* main */

/* end of my li'l program... */

