GOSUB and RETURN support in vbSlacker.

This is pretty simple. GOSUB and RETURN are basically commands that allow
programmers to create subroutines within subroutines. However, with very
little structure, they succeed mostly in creating spaghetti code, so using
them is not a good idea. However, they are part of the language, so we
support them. Also, the construct ON EVENT GOSUB LABEL is another use for
GOSUB (and is talked about in on_events.txt...).

So, without further ado, here's everything you always wanted to know about
GOSUB but were afraid to ask.

Any procedure that uses GOSUB will NOT compile unless you #include "Gosub.h"
(or "StdBasic.h" or "BasicLib.h"...) and write this as the VERY FIRST line of
all procedures containing GOSUBs and/or RETURNs, before any variables are
declared.

__GOSUBSUPPORT;


Now, to GOSUB to another piece of that procedure, put a line label where you
want to land, and a line label for the start of the next line of BASIC
code AFTER that label's line (This is for the RETURN command's benefit),
like so...

crackpipe:

    __printNChars("Feh!", 4);
    __printNewLine();

nextline:

...and then do this to "gosub":

__doGosub(&&crackpipe, &&nextline);


Tada!


(Not that

To RETURN, here's what's what:

- You must have GOSUBed, or you'll get the runtime error "RETURN without
   GOSUB."
- You must be RETURNing in the same procedure you GOSUBed from. RETURNing in
   another procedure nails you with a "RETURN without GOSUB" error. You may
   still call other procedures from within the GOSUB handler, but you must be
   back in the original GOSUB handler before RETURNing.
- You may GOSUB, call another SUB, and GOSUB from there as well. This sort of
   stacking will lead to spaghetti code, but IS legal.
- You may also have multiple GOSUBs, or recursive GOSUBs in the same procedure,
   as long as you don't call RETURN more than you call GOSUB.
- You may leave a procedure from inside a GOSUB handler, but the GOSUB is lost,
   and calling RETURN, even if you end up back in that procedure, will result
   in a "RETURN without GOSUB" error.

This is all how Microsoft BASICs handle GOSUBs, too. We didn't make any of
this up. In fact, we'd've done away with it in the first place, if we had
our say back in the late 70s when these commands were first introduced to the
language.

Anyhow, wherever your BASIC "RETURN" statement would be, put this instead:

__doReturn(&&retAddr);

Where retAddr is the line label to "return" to, or NULL to return to the line
after the matching GOSUB call.

Overall, pretty easy.

Note that __GOSUBSUPPORT, __doGosub, and __doReturn are all macros, so avoid
"++" and "--" operators in conjunction with them (of course, you'll probably
only ever use line label addresses with this, but there's always that one
guy...)

Don't use "__gosub" as a variable name, as __GOSUBSUPPORT will reserve that.

One last thing (that is expanded upon in on_events.txt) to mention is that
anywhere you would have an OnEvent that GOSUBs (as opposed to GOTOs), you
need to use the __GOSUBSUPPORT macro, and __doReturn just as you always
would. So, "On Timer Gosub myAss" still needs __GOSUBSUPPORT in that procedure.

Have fun.

/* end of Gosub.txt ... */




