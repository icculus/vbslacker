Coding standards. Revised 06/27/98

- C code should not use "//" comments. GCC doesn't like them. C++ code can
   use them freely.

- Comment excessively. The heading of each function should explain what the
   function does, each parameter, and the return value. If there are possible
   runtime exceptions, note them as well.

- Don't overcomment. This isn't assembler; some lines of code will just
   speak for themselves.

- If you make more than minor changes to a file, make a backup. Keep that
   backup around until you're sure you haven't coded yourself into a corner.
   Alternately, programs like CVS or SourceSafe will keep revision versions
   for us, so that in itself might make one of these programs worthwhile.

- In the leading comments it would be worthwhile to make notes of any changes
   you've made since the last revision. Again, another job for CVS, but yeah.

- If there's a problem piece of code, something to come back to, or a known
   bug that is identified but needs to be fixed, label the code with "!!!"
   so we can find it later, and know what it is.

   example:

   int foo(char bar)
   {
       /* !!! This needs a complete rewrite to handle widgets. */
   } /* foo */


   Standardizing this saves us trouble when we just need to do a text search
   to find weak points in the code.

- No more than 80 characters to a line. Period.

- Never use TAB characters. Always spaces. Make sure your editor autoconverts.

- Why not? Let's call the indent size FOUR spaces, eh?

- This annoys me:

    void myFunc(Foo bar) {
      blahblahblah();
    }

  Do this:

    void myFunc(Foo bar)
    {
      blahblahblah();
    }


- It couldn't hurt, especially on large, complex functions, to comment what
   the end bracket goes to (this was the one saving grace of BASIC, there
   weren't ambiguous end brackets, there were END IF, END FUNCTION, etc...)

   if (foo == bar)
   {
       _do(something);
   } /* if */ <--- That thing. Do that. It helps, I promise.


- Capitalizations. I like the Java standards on this one: variables and
   functions are uppercase, except first word:

      printToScreen(anotherCoolVariable);

  Class names, structures, etc...are capitalized for every word.

      MyCoolClassName instanceOfCoolClass = new MyCoolClassName();

  Exceptions to this rule are data types that try to disguise themselves as
   intrinsics. Best example is declaring a data type called "boolean."

  Filenames (which in Java must be identical to the contained class's name)
   will be capitalized like class names.

  Constants and macros are completely capitalized, and since they don't have
   the luxury of lowercase letters, you can signify word separations with an
   underscore character.

  #define CRACK_PIPE 10
  #define BUTTS(x) ((x > CRACK_PIPE) ? x : CRACK_PIPE)

- In C/C++, since we can't use '$' in identifiers, we'll replace it with
   "_DC_". (underscore-D-S-underscore. DC is for "dollar char.") This will be
   needed for things like the basic library functions "chr$()" and converting
   valid user variable names in BASIC to C to pass to gcc. Other problem
   characters are "_PC_"  ('%'...percent char), "_EC_" ('!'...exclamation
   char), "_AC_" ('&'...ampersand char), etc...

- General, personalized coding practices should be duplicated when modifying
   others' code. Keep your own style for your own file. I don't care if the
   tab size in someone else's file pisses you off.

- Keep it simple, stupid.


