# Makefile for building a dynamic (shared) BASIClib

DYNLIBBASE = libBASIC.so
DYNLIBWHOLE = $(DYNLIBBASE).$(WHOLEVERSION)
DYNLIBMAJOR = $(DYNLIBBASE).$(MAJORVER)

OBJS = BasicString.o ConversionFunctions.o Initialize.o OnEvents.o \
       ErrorFunctions.o MathFunctions.o InternalMemManager.o Threads.o \
       TimeDateFunctions.o FileIOFunctions.o BasicFileStream.o \
       StringFunctions.o LowLevelFunctions.o SignalHandlers.o \
       ConsoleFunctions.o PenFunctions.o ProcessFunctions.o \
       FileSystemFunctions.o Variant.o BasicError.o NoConsole.o \
       DirectConsole.o RedirectedConsole.o CursesConsole.o

CC = gcc
LINKER = gcc
ASM = gcc

LANGUAGE=ENGLISH

# Use this before $(COPTIONS) on modules that use inb, outb, etc ...
IOACCESS = -O3

# Shipping command lines
#COPTIONS = -DLINUX -D_REENTRANT -DLANG_$(LANGUAGE) -Wall -O2 -fPIC -fasm -finline-functions -s -c -o
#LOPTIONS = -shared -Wl,-soname,$(DYNLIBMAJOR) -s -O2 -o
#ASMOPTIONS = -Wall -c -o

# Debug command lines...
COPTIONS = -DLINUX -D_REENTRANT -DLANG_$(LANGUAGE) -Wall -fPIC -fasm -finline-functions -DDEBUG -g -c -o
LOPTIONS = -Wall -shared -Wl,-soname,$(DYNLIBMAJOR) -o
ASMOPTIONS = -D_REENTRANT -Wall -c -o

all : $(DYNLIBBASE)

$(DYNLIBBASE) : $(DYNLIBMAJOR)
	ln -sf $(DYNLIBMAJOR) $(DYNLIBBASE)

$(DYNLIBMAJOR) : $(DYNLIBWHOLE)
	ln -sf $(DYNLIBWHOLE) $(DYNLIBMAJOR)

$(DYNLIBWHOLE) : $(OBJS)
	$(LINKER) $(LOPTIONS) $(DYNLIBWHOLE) $(OBJS)

BasicString.o : BasicString.c BasicString.h
	$(CC) $(COPTIONS) BasicString.o BasicString.c

ConversionFunctions.o : ConversionFunctions.c ConversionFunctions.h
	$(CC) $(COPTIONS) ConversionFunctions.o ConversionFunctions.c

Initialize.o : Initialize.c Initialize.h
	$(CC) $(COPTIONS) Initialize.o Initialize.c

OnEvents.o : OnEvents.c OnEvents.h InternalMemManager.h
	$(CC) $(COPTIONS) OnEvents.o OnEvents.c

ErrorFunctions.o : ErrorFunctions.c ErrorFunctions.h
	$(CC) $(COPTIONS) ErrorFunctions.o ErrorFunctions.c

MathFunctions.o : MathFunctions.c MathFunctions.h
	$(CC) $(COPTIONS) MathFunctions.o MathFunctions.c

InternalMemManager.o : InternalMemManager.c InternalMemManager.h
	$(CC) $(COPTIONS) InternalMemManager.o InternalMemManager.c

Threads.o : Threads.c Threads.h
	$(CC) $(COPTIONS) Threads.o Threads.c

TimeDateFunctions.o : TimeDateFunctions.c TimeDateFunctions.h
	$(CC) $(COPTIONS) TimeDateFunctions.o TimeDateFunctions.c

BasicFileStream.o : BasicFileStream.c BasicFileStream.h 
	$(CC) $(COPTIONS) BasicFileStream.o BasicFileStream.c

FileIOFunctions.o : FileIOFunctions.c FileIOFunctions.h
	$(CC) $(COPTIONS) FileIOFunctions.o FileIOFunctions.c

StringFunctions.o : StringFunctions.c StringFunctions.h
	$(CC) $(COPTIONS) StringFunctions.o StringFunctions.c

LowLevelFunctions.o : LowLevelFunctions.c LowLevelFunctions.h
	$(CC) $(IOACCESS) $(COPTIONS) LowLevelFunctions.o LowLevelFunctions.c

SignalHandlers.o : SignalHandlers.c SignalHandlers.h
	$(CC) $(COPTIONS) SignalHandlers.o SignalHandlers.c

ConsoleFunctions.o : ConsoleFunctions.c ConsoleFunctions.h \
                     NoConsole.h DirectConsole.h RedirectedConsole.h \
                     CursesConsole.h
	$(CC) $(COPTIONS) ConsoleFunctions.o ConsoleFunctions.c

NoConsole.o : NoConsole.c NoConsole.h ConsoleFunctions.h
	$(CC) $(COPTIONS) NoConsole.o NoConsole.c

DirectConsole.o : DirectConsole.c DirectConsole.h ConsoleFunctions.h
	$(CC) $(COPTIONS) DirectConsole.o DirectConsole.c

RedirectedConsole.o : RedirectedConsole.c RedirectedConsole.h ConsoleFunctions.h
	$(CC) $(COPTIONS) RedirectedConsole.o RedirectedConsole.c

CursesConsole.o : CursesConsole.c CursesConsole.h ConsoleFunctions.h
	$(CC) $(COPTIONS) CursesConsole.o CursesConsole.c

PenFunctions.o : PenFunctions.c PenFunctions.h
	$(CC) $(COPTIONS) PenFunctions.o PenFunctions.c

ProcessFunctions.o : ProcessFunctions.c ProcessFunctions.h
	$(CC) $(COPTIONS) ProcessFunctions.o ProcessFunctions.c

FileSystemFunctions.o : FileSystemFunctions.c FileSystemFunctions.h
	$(CC) $(COPTIONS) FileSystemFunctions.o FileSystemFunctions.c

Variant.o : Variant.c Variant.h Boolean.h
	$(CC) $(COPTIONS) Variant.o Variant.c

BasicError.o : BasicError.c BasicError.h
	$(CC) $(COPTIONS) BasicError.o BasicError.c

# end of Makefile.linux ...

